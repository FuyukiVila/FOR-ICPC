/*

  _______  _______ .__   __.      _______. __    __   __  .__   __.     __  .___  ___. .______      ___       ______ .___________.
 /  _____||   ____||  \ |  |     /       ||  |  |  | |  | |  \ |  |    |  | |   \/   | |   _  \    /   \     /      ||           |
|  |  __  |  |__   |   \|  |    |   (----`|  |__|  | |  | |   \|  |    |  | |  \  /  | |  |_)  |  /  ^  \   |  ,----'`---|  |----`
|  | |_ | |   __|  |  . `  |     \   \    |   __   | |  | |  . `  |    |  | |  |\/|  | |   ___/  /  /_\  \  |  |         |  |
|  |__| | |  |____ |  |\   | .----)   |   |  |  |  | |  | |  |\   |    |  | |  |  |  | |  |     /  _____  \ |  `----.    |  |
 \______| |_______||__| \__| |_______/    |__|  |__| |__| |__| \__|    |__| |__|  |__| | _|    /__/     \__\ \______|    |__|

□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□□□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□□□■■■■■■■■■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□■■■■■■■□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□□□□□□□□□■■■□□□□□□□□□□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□■■□□□□□□□□□■■□□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□□□□□□□□■■■■□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□□□■□□□□□□□□□■■□□□□□□□□■■■■□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□■■□□□□□■■■□□□□□□□■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□■■□□□□□□□□■■□□□□□■■■■■■■■□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□■■■□□□□■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□■■■□□□□□□□■■■■■■■■■■■■■■□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□■■■■■■■■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■■□■■■■■■■■■■■■■■■■■■■■■■■□□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□■■■■■■■■■■■■■■■■■□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■■□■■■■■■■■■■■■■■■■□□□□■■■□□□□□□□□□□□
□□□□□□□□□□□□□□■■■□□□■■■■■■■■□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■■■■□□□■■■■■■■■■□■■□□□□□□□□■■■□□□□□□□□□□□
□□□□□□□□□□□□□□■■□□□□□■■■□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■□□□□■■■■□□□■■■□□□□□□□■■□□□□□□□□■■■□□□□□□□□□□□
□□□□□□□□□□□□□□■■□□□□□■■■□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□■■□□□□□□□□■■■■□□□□■■■□□□□□□□■■□□□□□□□□■■■□□□□□□□□□□□
□□□□□□□□□□□□□□■■□□□□□■■■□□□□□□□■■■■■■■■□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□■■□□□□□□□■■□□□□□□□□■■■□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□■■■■■■■■■■■■■■■■■■□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□■■□□□□□□□■■■■■■■■□□■■■□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□■■■■■■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□■■□■■■■■■■■■■■■■■■□■■□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□■■■■■■■■■■□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■□□□□□□■■■■■■■■■■■■■■■■□□■■■□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□■■■□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■■□□□□■■■■■■■■■■■□□□□□□□■■■□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□■■■□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■■■■□□□■■■□□□□□□■■□□□□□□□■■■□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□■■■□□□□□□□□□□□□■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■□■■■■■□□■■■□□□□□□■■□□□□□□□■■■□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□□■■■□□□■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□■■■□□■■■■□□■■■□□□□□□■■□□□□□□□■■■□□□□□□□□□□□□
□□□□□□□□□□□□□■■■□□□□■■■■■■■■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□■■■□□□■■■□□■■■□□□□□□■■□□□□□□□■■■□□□□□□□□□□□□
□□□□□□□□□□□□■■■□□□□□■■■■■■■■■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□■■■□□□□■■□□■■■□□□□□□■■□□□■■■□■■■□□□□□□□□□□□□
□□□□□□□□□□□□■■■□□□□□□■■■■■■■□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□■■■□□□□□■□□■■■□■■■■■■■■■■■■■■■■■□□□□□□□□□□□□
□□□□□□□□□□□□■■■□□□□□□□■■□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□■■■□□□□□□□■■■■■■■■■■■■■■■■■■■■■■□□□□□□□□□□□□
□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□■■■□□□□□□□■■■■■■■■■■■■■□□□□□□■■□□□□□□□□□□□□□
□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□■■■□□□□□□□■■■■□□□□□□■■□□□□□□□■■□□□□□□□□□□□□□
□□□□□□□□□□□■■■□□□□□□□□■■□□□□□□□■■■□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□■■■□□□□□□□□■■□□□□□□□■■□□□□□□□■■□□□□□□□□□□□□□
□□□□□□□□□□□■■■□□□□□□□□■■■□□□□□□■■□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□■■□□□□□□□□□□■■■□□□□□□□□■■□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□■■■□□□□□□□□□■■■□□□□□□■■□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□■■■□□□□□□□□■■■■■□□□□□■■□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□■■■□□□□□□□■■■■■□□□□□□■■□□□□□□□■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□■■■□□□□□□□■■■■■□□□□□□□■■□□□□□□□□■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□■■■□□□□□□□■■■■□□□□□□□□■■□□□□□□□□□■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□■■■□□□□□□□■■■■□□□□□□□□□■■□□□□□□□□□□■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□■■■□□□□□□□■■■□□□□□□□□□□□■■□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□■■■□□□□□□■■■□□□□□■■□□□□□■■□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□■■■□□□□□□■■■□□□□□□■■■■□□□■■□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□■■□□□□□□■■■□□□□□□□□■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□■■■□□□□□□■■□□□□□□□□□□■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□■■□□□□□□□□□□□□□□□□□□□□□■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□□□□□□■■■□□□□□□□□□□□□□□□□□□□□□□

  ______                 _    _  __      ___ _
 |  ____|               | |  (_) \ \    / (_) |
 | |__ _   _ _   _ _   _| | ___   \ \  / / _| | __ _
 |  __| | | | | | | | | | |/ / |   \ \/ / | | |/ _` |
 | |  | |_| | |_| | |_| |   <| |    \  /  | | | (_| |
 |_|   \__,_|\__, |\__,_|_|\_\_|     \/   |_|_|\__,_|
              __/ |
             |___/

*/

#define GKD std::cin.tie(nullptr)->std::ios::sync_with_stdio(false)
#define clr(a, b) memset(a, b, sizeof(a))

#include <bits/stdc++.h>

#define dbg(x...) \
    do { \
        std::cout << #x << " -> "; \
        err(x); \
    } while (0)

void err() {
    std::cout << std::endl;
}

template<class T, class... Ts>
void err(T arg, Ts &... args) {
    std::cout << arg << ' ';
    err(args...);
}

using namespace std;
using ll = long long;
using ull = unsigned long long;
template<typename T>
using umap = unordered_map<T, T>;
template<typename T>
using uset = unordered_set<T, T>;
const double pi = acos(-1);
const int INF = 0x3f3f3f3f;
const ll mod = 998244353;

inline constexpr ll qpow(ll _a, ll _n, ll _mod = mod) {
    ll ans = 1;
    while (_n) {
        if (_n & 1) ans *= _a;
        _n >>= 1;
        _a *= _a;
        if (_mod > 0) {
            ans %= _mod;
            _a %= _mod;
        }
    }
    return ans % mod;
}

constexpr int N = 1e7 + 100;
int minp[N];
vector<int> primes;
bool st[N];

void get_primes(int n) {
    for (int i = 2; i <= n; i++) {
        if (!st[i]) minp[i] = i, primes.emplace_back(i);
        for (int j = 0; primes[j] * i <= n; j++) {
            int t = primes[j] * i;
            st[t] = true;
            minp[t] = primes[j];
            if (i % primes[j] == 0) break;
        }
    }
}

std::random_device rd;
std::default_random_engine eng(rd());
std::uniform_int_distribution<ll> ranint(1, 1e18);

//玩原神导致的
#define int ll

void genshin_start(ll test) {
    ll n;
    ll ans = 0;
    cin >> n;
    ll k = 1;
//    for (ll i = 1; i <= n; i++) {
//        if (i * i > n) {
//            k = i;
//            break;
//        }
//    }
    k = sqrt(n) + 1;
    for (ll a = 2; a <= k; a++) {
        for (ll b = a * a, j = 1;; b *= a, j++) {
            if (b > n) {
                ans += (a % mod) * j % mod * ((n - b / a + 1 + mod) % mod);
                ans %= mod;
                break;
            } else {
                ans += (a % mod) * j % mod * ((b - b / a + mod) % mod);
                ans %= mod;
            }
        }
    }
    n %= mod;
    ll res1 = (n + 1) % mod * (k + 1 + n) % mod * (n - k + mod) % mod * qpow(2, mod - 2) % mod;
    ll res2 = (n % mod * (n + 1) % mod * (2 * n + 1) % mod - (k * (k + 1) % mod * (2 * k + 1) % mod) + mod) % mod *
              qpow(6, mod - 2) % mod;
//    res2 = (res2 - (k % mod) * ((k + 1) % mod) * ((2 * k + 1) % mod) % mod * qpow(6, mod - 2) % mod + mod) % mod;
    cout << ((ans + res1) % mod - res2 + mod) % mod << '\n';
}

signed main() {
    GKD;
    auto T = 1;
//    cin >> T;
    while (T--) genshin_start(T);
    return 0;
}